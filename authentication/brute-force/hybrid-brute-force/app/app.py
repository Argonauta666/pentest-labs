from uuid import uuid4
from werkzeug.exceptions import HTTPException, default_exceptions
from flask import Flask, redirect, request, abort, render_template,flash, url_for
from flask_login import LoginManager, UserMixin, login_required, login_user, logout_user, current_user
from timeit import default_timer as timer
from datetime import timedelta
from platform import platform
from random import choice
from string import digits

APP = Flask(__name__)

APP.config.update(
    DEBUG = True,
    SECRET_KEY = uuid4().hex
)

login_manager = LoginManager()
login_manager.init_app(APP)
login_manager.login_view = "login"

class User(UserMixin):
    def __init__(self, id, username, password):
        self.id = id
        self.username = username
        self.password = password
        self.authenticated = False

    def is_active(self):
        return self.is_active()

    def is_authenticated(self):
        return self.authenticated

    def is_active(self):
        return True

    def get_id(self):
        return self.id

temp_pass = 'performance' + ''.join(choice(digits) for _ in range(4))
users = [User(0,'admin',temp_pass)]
print(temp_pass)

def check_user(username,password):
    for user in users:
        if user.username == username and user.password == password:
            user.authenticated = True
            login_user(user)
            return user
    return None

@APP.route('/')
@APP.route('/home')
@login_required
def home():
    if current_user.is_authenticated():
        return render_template('index.html', content='main', value='Username: {}<br>Server: {}<br>Time-lapse: {}'.format(current_user.username,platform(),timedelta(seconds=timer()-START)))
    else:
        return redirect(url_for('login'))

@APP.route("/login", methods=["GET", "POST"])
def login():
    if request.method == 'POST':
        user = check_user(request.form['username'],request.form['password'])
        if user:
            if user.is_authenticated:
                flash({'type': 'success','message':'{} logged in'.format(user.username)})
                return redirect(url_for('home'))
        flash({'type': 'danger','message': 'Username and/or password is incorrect'})
    return render_template('index.html', content='login')

@APP.route("/logout")
@login_required
def logout():
    if current_user.is_authenticated():
        flash({'type': 'info','message':'{} logged out'.format(current_user.username)})
        logout_user()
    return redirect(url_for('home'))

@login_manager.user_loader
def load_user(userid):
    for user in users:
        if user.id == userid:
            return user
    return None

def handle_all_errors(error):
    code = 500
    if isinstance(error, HTTPException):
        code = error.code
    return render_template('index.html', content='error', value='Error {}'.format(str(uuid4())))

for exc in default_exceptions:
    APP.register_error_handler(exc, handle_all_errors)

START = timer()
APP.run(host='0.0.0.0', port=5142)
