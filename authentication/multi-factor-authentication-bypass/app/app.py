from uuid import uuid4
from werkzeug.exceptions import HTTPException, default_exceptions
from flask import Flask, redirect, request, abort, render_template,flash, url_for, session
from flask_login import LoginManager, UserMixin, login_required, login_user, logout_user, current_user
from timeit import default_timer as timer
from datetime import timedelta
from platform import platform
from PIL import Image, ImageDraw, ImageFont, ImageFilter
from io import BytesIO
from base64 import b64encode
from random import randint,choice
from hashlib import md5
from string import ascii_letters
from smtplib import SMTP
from email.utils import formataddr
from email.mime.text import MIMEText

import logging

APP = Flask(__name__)

APP.config.update(
    DEBUG = True,
    SECRET_KEY = uuid4().hex
)

login_manager = LoginManager()
login_manager.init_app(APP)
login_manager.login_view = "login"
secert_key_mf_code = str(uuid4())

class User(UserMixin):
    def __init__(self, id, username, password):
        self.id = id
        self.username = username
        self.password = password
        self.authenticated = False

    def is_active(self):
        return self.is_active()

    def is_authenticated(self):
        return self.authenticated

    def is_active(self):
        return True

    def get_id(self):
        return self.id
    
users = [User(0,'test','test'),User(1,'admin','password'),User(2,'admin','admin')]

def send_code_email(text):
    msg = MIMEText(text)
    msg['To'] = formataddr(('Recipient', 'server@test.local'))
    msg['From'] = formataddr(('Author', 'api@test.local'))
    msg['Subject'] = text
    server = SMTP('127.0.0.1', 1025)
    server.sendmail('api@test.local', ['server@test.local'], msg.as_string())
    server.quit()

def check_user(username,password):
    for user in users:
        if user.username == username and user.password == password:
            user.authenticated = True
            login_user(user)
            return user
    return None

@APP.route('/')
@APP.route('/home')
@login_required
def home():
    if current_user.is_authenticated():
        return render_template('index.html', content='main', value='Username: {}<br>Server: {}<br>Time-lapse: {}'.format(current_user.username,platform(),timedelta(seconds=timer()-START)))
    else:
        return redirect(url_for('login'))

@APP.route("/login", methods=["GET", "POST"])
def login():
    mf_code_check = True
    if request.method == 'POST':
        if 'mf_code' in session and 'mf_code' in request.form:
            #APP.logger.debug(session['mf_code'])
            #APP.logger.debug(md5((request.form['mf_code']+secert_key_mf_code).encode('utf-8')).hexdigest())
            if session['mf_code'] != md5((request.form['mf_code']+secert_key_mf_code).encode('utf-8')).hexdigest():
                mf_code_check = False
    
        if mf_code_check:
            user = check_user(request.form['username'],request.form['password'])
            if user:
                if user.is_authenticated:
                    flash({'type': 'success','message':'{} logged in'.format(user.username)})
                    return redirect(url_for('home'))
        flash({'type': 'danger','message': 'Username and/or password is incorrect'})
    
    if 'mf_code' in session:
        session.pop('mf_code')
    random_text = ''.join(choice(ascii_letters.upper()) for x in range(6))
    session['mf_code'] = md5((random_text+secert_key_mf_code).encode('utf-8')).hexdigest()
    send_code_email('Your code is: '+random_text)
    return render_template('index.html', content='login')

@APP.route("/logout")
@login_required
def logout():
    if current_user.is_authenticated():
        flash({'type': 'info','message':'{} logged out'.format(current_user.username)})
        logout_user()
    return redirect(url_for('home'))

@login_manager.user_loader
def load_user(userid):
    for user in users:
        if user.id == userid:
            return user
    return None

def handle_all_errors(error):
    code = 500
    if isinstance(error, HTTPException):
        code = error.code
    return render_template('index.html', content='error', value='Error {}'.format(str(uuid4())))

for exc in default_exceptions:
    APP.register_error_handler(exc, handle_all_errors)

START = timer()
APP.run(host='0.0.0.0', port=5142)
